{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{ExamStatus}from'../types';export const useExamTimer=_ref=>{let{exam,onTimeUp,onStatusChange}=_ref;const[timeLeft,setTimeLeft]=useState(0);const[isRunning,setIsRunning]=useState(false);const[elapsedTime,setElapsedTime]=useState(0);// Calculate initial time left\nuseEffect(()=>{if(exam){const now=new Date().getTime();const startTime=new Date(exam.startDate).getTime();const periodMs=exam.period*60*1000;// Convert minutes to milliseconds\nconst totalPausedTime=exam.totalPausedTime||0;// Calculate elapsed time considering pauses\nlet elapsed=0;if(exam.status===ExamStatus.InProgress){elapsed=now-startTime-totalPausedTime;}else if(exam.status===ExamStatus.Paused&&exam.pausedAt){const pauseTime=new Date(exam.pausedAt).getTime();elapsed=pauseTime-startTime-totalPausedTime;}const remaining=Math.max(0,periodMs-elapsed);setTimeLeft(remaining);setElapsedTime(elapsed);setIsRunning(exam.status===ExamStatus.InProgress);}},[exam]);// Timer effect\nuseEffect(()=>{let interval=null;if(isRunning&&timeLeft>0){interval=setInterval(()=>{setTimeLeft(prev=>{const newTime=prev-1000;if(newTime<=0){setIsRunning(false);onTimeUp===null||onTimeUp===void 0?void 0:onTimeUp();return 0;}return newTime;});},1000);}return()=>{if(interval){clearInterval(interval);}};},[isRunning,timeLeft,onTimeUp]);// Update running state when exam status changes\nuseEffect(()=>{setIsRunning(exam.status===ExamStatus.InProgress);onStatusChange===null||onStatusChange===void 0?void 0:onStatusChange(exam.status);},[exam.status,onStatusChange]);const formatTime=useCallback(ms=>{const totalSeconds=Math.floor(ms/1000);const hours=Math.floor(totalSeconds/3600);const minutes=Math.floor(totalSeconds%3600/60);const seconds=totalSeconds%60;if(hours>0){return\"\".concat(hours.toString().padStart(2,'0'),\":\").concat(minutes.toString().padStart(2,'0'),\":\").concat(seconds.toString().padStart(2,'0'));}return\"\".concat(minutes.toString().padStart(2,'0'),\":\").concat(seconds.toString().padStart(2,'0'));},[]);const getProgressPercentage=useCallback(()=>{if(!exam)return 0;const totalTime=exam.period*60*1000;return Math.min(100,elapsedTime/totalTime*100);},[exam,elapsedTime]);return{timeLeft,isRunning,elapsedTime,formatTime,getProgressPercentage,status:exam.status};};","map":{"version":3,"names":["useState","useEffect","useCallback","ExamStatus","useExamTimer","_ref","exam","onTimeUp","onStatusChange","timeLeft","setTimeLeft","isRunning","setIsRunning","elapsedTime","setElapsedTime","now","Date","getTime","startTime","startDate","periodMs","period","totalPausedTime","elapsed","status","InProgress","Paused","pausedAt","pauseTime","remaining","Math","max","interval","setInterval","prev","newTime","clearInterval","formatTime","ms","totalSeconds","floor","hours","minutes","seconds","concat","toString","padStart","getProgressPercentage","totalTime","min"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/hooks/useExamTimer.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Exam, ExamStatus } from '../types';\n\ninterface UseExamTimerProps {\n  exam: Exam;\n  onTimeUp?: () => void;\n  onStatusChange?: (status: ExamStatus) => void;\n}\n\nexport const useExamTimer = ({\n  exam,\n  onTimeUp,\n  onStatusChange,\n}: UseExamTimerProps) => {\n  const [timeLeft, setTimeLeft] = useState<number>(0);\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n  const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n  // Calculate initial time left\n  useEffect(() => {\n    if (exam) {\n      const now = new Date().getTime();\n      const startTime = new Date(exam.startDate).getTime();\n      const periodMs = exam.period * 60 * 1000; // Convert minutes to milliseconds\n      const totalPausedTime = exam.totalPausedTime || 0;\n\n      // Calculate elapsed time considering pauses\n      let elapsed = 0;\n      if (exam.status === ExamStatus.InProgress) {\n        elapsed = now - startTime - totalPausedTime;\n      } else if (exam.status === ExamStatus.Paused && exam.pausedAt) {\n        const pauseTime = new Date(exam.pausedAt).getTime();\n        elapsed = pauseTime - startTime - totalPausedTime;\n      }\n\n      const remaining = Math.max(0, periodMs - elapsed);\n      setTimeLeft(remaining);\n      setElapsedTime(elapsed);\n      setIsRunning(exam.status === ExamStatus.InProgress);\n    }\n  }, [exam]);\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft((prev) => {\n          const newTime = prev - 1000;\n          if (newTime <= 0) {\n            setIsRunning(false);\n            onTimeUp?.();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning, timeLeft, onTimeUp]);\n\n  // Update running state when exam status changes\n  useEffect(() => {\n    setIsRunning(exam.status === ExamStatus.InProgress);\n    onStatusChange?.(exam.status);\n  }, [exam.status, onStatusChange]);\n\n  const formatTime = useCallback((ms: number): string => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n\n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes\n        .toString()\n        .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes.toString().padStart(2, '0')}:${seconds\n      .toString()\n      .padStart(2, '0')}`;\n  }, []);\n\n  const getProgressPercentage = useCallback((): number => {\n    if (!exam) return 0;\n    const totalTime = exam.period * 60 * 1000;\n    return Math.min(100, (elapsedTime / totalTime) * 100);\n  }, [exam, elapsedTime]);\n\n  return {\n    timeLeft,\n    isRunning,\n    elapsedTime,\n    formatTime,\n    getProgressPercentage,\n    status: exam.status,\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}