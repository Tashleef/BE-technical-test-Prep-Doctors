{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async credentials => {\n    try {\n      // Use fetch instead of axios to avoid CORS preflight issues\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Login response:', data);\n\n      // Backend returns { data: { user, accessToken } }, extract and transform\n      const {\n        user,\n        accessToken\n      } = data.data;\n\n      // Store the token and user\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        access_token: accessToken,\n        // Convert accessToken → access_token\n        user: user\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const examService = {\n  getAllExams: async params => {\n    try {\n      const token = localStorage.getItem(\"access_token\");\n      console.log('Getting exams with token:', {\n        hasToken: !!token,\n        tokenLength: token === null || token === void 0 ? void 0 : token.length,\n        tokenStart: (token === null || token === void 0 ? void 0 : token.substring(0, 20)) + '...',\n        tokenEnd: token === null || token === void 0 ? void 0 : token.substring(token.length - 20)\n      });\n\n      // Ensure search parameter is always sent (backend validation requires it)\n      const queryParams = {\n        search: (params === null || params === void 0 ? void 0 : params.search) || \"\",\n        // Send empty string if no search\n        ...((params === null || params === void 0 ? void 0 : params.skip) && {\n          skip: params.skip\n        }),\n        ...((params === null || params === void 0 ? void 0 : params.take) && {\n          take: params.take\n        })\n      };\n      const queryString = new URLSearchParams(queryParams).toString();\n      const url = `${API_BASE_URL}/exams?${queryString}`;\n      console.log('Making request to:', url);\n      console.log('With headers:', {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      });\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Get exams error:', errorData);\n        throw new Error(`HTTP error! status: ${response.status}, message: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'Unknown error'}`);\n      }\n      const data = await response.json();\n      console.log('Exams response:', data);\n      return data;\n    } catch (error) {\n      console.error(\"Get exams error:\", error);\n      throw error;\n    }\n  },\n  getExamById: async id => {\n    const response = await api.get(`/exams/${id}`);\n    return response.data;\n  },\n  pauseExam: async id => {\n    const response = await api.patch(`/exams/${id}/pause`);\n    return response.data;\n  },\n  unpauseExam: async id => {\n    const response = await api.post(`/exams/${id}/unpause`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","fetch","method","body","JSON","stringify","ok","Error","data","json","console","log","user","accessToken","setItem","access_token","logout","getCurrentUser","userStr","parse","examService","getAllExams","params","hasToken","tokenLength","length","tokenStart","substring","tokenEnd","queryParams","search","skip","take","queryString","URLSearchParams","toString","url","Object","fromEntries","entries","_errorData$error","errorData","catch","message","getExamById","id","get","pauseExam","patch","unpauseExam","post"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { LoginCredentials, LoginResponse, Exam, ApiResponse } from '../types';\n\nconst API_BASE_URL = 'http://localhost:3000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  },\n);\n\nexport const authService = {\n  login: async (credentials: LoginCredentials): Promise<LoginResponse> => {\n    try {\n      // Use fetch instead of axios to avoid CORS preflight issues\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Login response:', data);\n      \n      // Backend returns { data: { user, accessToken } }, extract and transform\n      const { user, accessToken } = data.data;\n      \n      // Store the token and user\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      return {\n        access_token: accessToken, // Convert accessToken → access_token\n        user: user\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n  },\n\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n};\n\nexport const examService = {\n\tgetAllExams: async (params?: { search?: string; skip?: number; take?: number }): Promise<ApiResponse<Exam[]>> => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem(\"access_token\");\n\t\t\tconsole.log('Getting exams with token:', {\n\t\t\t\thasToken: !!token,\n\t\t\t\ttokenLength: token?.length,\n\t\t\t\ttokenStart: token?.substring(0, 20) + '...',\n\t\t\t\ttokenEnd: token?.substring(token.length - 20)\n\t\t\t});\n\t\t\t\n\t\t\t// Ensure search parameter is always sent (backend validation requires it)\n\t\t\tconst queryParams = {\n\t\t\t\tsearch: params?.search || \"\",  // Send empty string if no search\n\t\t\t\t...(params?.skip && { skip: params.skip }),\n\t\t\t\t...(params?.take && { take: params.take })\n\t\t\t};\n\t\t\t\n\t\t\tconst queryString = new URLSearchParams(queryParams).toString();\n\t\t\tconst url = `${API_BASE_URL}/exams?${queryString}`;\n\t\t\t\n\t\t\tconsole.log('Making request to:', url);\n\t\t\tconsole.log('With headers:', {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t});\n\t\t\t\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconsole.log('Response status:', response.status);\n\t\t\tconsole.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.json().catch(() => ({}));\n\t\t\t\tconsole.error('Get exams error:', errorData);\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}, message: ${errorData.error?.message || 'Unknown error'}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log('Exams response:', data);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Get exams error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n  getExamById: async (id: number): Promise<Exam> => {\n    const response = await api.get(`/exams/${id}`);\n    return response.data;\n  },\n\n  pauseExam: async (id: number): Promise<Exam> => {\n    const response = await api.patch(`/exams/${id}/pause`);\n    return response.data;\n  },\n\n  unpauseExam: async (id: number): Promise<Exam> => {\n    const response = await api.post(`/exams/${id}/unpause`);\n    return response.data;\n  },\n};\n\nexport default api;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}