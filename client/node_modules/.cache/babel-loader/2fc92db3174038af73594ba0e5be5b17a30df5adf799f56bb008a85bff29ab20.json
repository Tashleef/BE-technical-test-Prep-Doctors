{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { ExamStatus } from \"../types\";\nexport const useExamTimer = ({\n  exam,\n  onTimeUp,\n  onStatusChange\n}) => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // Calculate initial time left\n  useEffect(() => {\n    if (exam) {\n      const now = new Date().getTime();\n      const startTime = new Date(exam.startDate).getTime();\n      const periodMs = exam.period * 60 * 1000; // Convert minutes to milliseconds\n      const totalPausedTimeMs = (exam.totalPausedTime || 0) * 1000; // Convert seconds to milliseconds\n\n      // Calculate elapsed time considering pauses\n      let elapsed = 0;\n      if (exam.status === ExamStatus.InProgress) {\n        elapsed = now - startTime - totalPausedTimeMs;\n      } else if (exam.status === ExamStatus.Paused && exam.pausedAt) {\n        const pauseTime = new Date(exam.pausedAt).getTime();\n        elapsed = pauseTime - startTime - totalPausedTimeMs;\n      }\n      const remaining = Math.max(0, periodMs - elapsed);\n      setTimeLeft(remaining);\n      setElapsedTime(elapsed);\n      setIsRunning(exam.status === ExamStatus.InProgress);\n      console.log(\"Timer calculation:\", {\n        now: new Date(now).toISOString(),\n        startTime: new Date(startTime).toISOString(),\n        periodMs,\n        totalPausedTimeMs,\n        elapsed,\n        remaining,\n        examStatus: exam.status\n      });\n    }\n  }, [exam]);\n\n  // Timer effect\n  useEffect(() => {\n    let interval = null;\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft(prev => {\n          const newTime = prev - 1000;\n          if (newTime <= 0) {\n            setIsRunning(false);\n            onTimeUp === null || onTimeUp === void 0 ? void 0 : onTimeUp();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning, timeLeft, onTimeUp]);\n\n  // Update running state when exam status changes\n  useEffect(() => {\n    setIsRunning(exam.status === ExamStatus.InProgress);\n    onStatusChange === null || onStatusChange === void 0 ? void 0 : onStatusChange(exam.status);\n  }, [exam.status, onStatusChange]);\n  const formatTime = useCallback(ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    const seconds = totalSeconds % 60;\n    if (hours > 0) {\n      return `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n    }\n    return `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n  }, []);\n  const getProgressPercentage = useCallback(() => {\n    if (!exam) return 0;\n    const totalTime = exam.period * 60 * 1000; // Convert minutes to milliseconds\n    return Math.min(100, elapsedTime / totalTime * 100);\n  }, [exam, elapsedTime]);\n  return {\n    timeLeft,\n    isRunning,\n    elapsedTime,\n    formatTime,\n    getProgressPercentage,\n    status: exam.status\n  };\n};\n_s(useExamTimer, \"Oqwb2y9ffe6VqtZ3LGN6fUVJRvA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","ExamStatus","useExamTimer","exam","onTimeUp","onStatusChange","_s","timeLeft","setTimeLeft","isRunning","setIsRunning","elapsedTime","setElapsedTime","now","Date","getTime","startTime","startDate","periodMs","period","totalPausedTimeMs","totalPausedTime","elapsed","status","InProgress","Paused","pausedAt","pauseTime","remaining","Math","max","console","log","toISOString","examStatus","interval","setInterval","prev","newTime","clearInterval","formatTime","ms","totalSeconds","floor","hours","minutes","seconds","toString","padStart","getProgressPercentage","totalTime","min"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/hooks/useExamTimer.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Exam, ExamStatus } from \"../types\";\n\ninterface UseExamTimerProps {\n\texam: Exam;\n\tonTimeUp?: () => void;\n\tonStatusChange?: (status: ExamStatus) => void;\n}\n\nexport const useExamTimer = ({ exam, onTimeUp, onStatusChange }: UseExamTimerProps) => {\n\tconst [timeLeft, setTimeLeft] = useState<number>(0);\n\tconst [isRunning, setIsRunning] = useState<boolean>(false);\n\tconst [elapsedTime, setElapsedTime] = useState<number>(0);\n\n\t// Calculate initial time left\n\tuseEffect(() => {\n\t\tif (exam) {\n\t\t\tconst now = new Date().getTime();\n\t\t\tconst startTime = new Date(exam.startDate).getTime();\n\t\t\tconst periodMs = exam.period * 60 * 1000; // Convert minutes to milliseconds\n\t\t\tconst totalPausedTimeMs = (exam.totalPausedTime || 0) * 1000; // Convert seconds to milliseconds\n\n\t\t\t// Calculate elapsed time considering pauses\n\t\t\tlet elapsed = 0;\n\t\t\tif (exam.status === ExamStatus.InProgress) {\n\t\t\t\telapsed = now - startTime - totalPausedTimeMs;\n\t\t\t} else if (exam.status === ExamStatus.Paused && exam.pausedAt) {\n\t\t\t\tconst pauseTime = new Date(exam.pausedAt).getTime();\n\t\t\t\telapsed = pauseTime - startTime - totalPausedTimeMs;\n\t\t\t}\n\n\t\t\tconst remaining = Math.max(0, periodMs - elapsed);\n\t\t\tsetTimeLeft(remaining);\n\t\t\tsetElapsedTime(elapsed);\n\t\t\tsetIsRunning(exam.status === ExamStatus.InProgress);\n\n\t\t\tconsole.log(\"Timer calculation:\", {\n\t\t\t\tnow: new Date(now).toISOString(),\n\t\t\t\tstartTime: new Date(startTime).toISOString(),\n\t\t\t\tperiodMs,\n\t\t\t\ttotalPausedTimeMs,\n\t\t\t\telapsed,\n\t\t\t\tremaining,\n\t\t\t\texamStatus: exam.status,\n\t\t\t});\n\t\t}\n\t}, [exam]);\n\n\t// Timer effect\n\tuseEffect(() => {\n\t\tlet interval: NodeJS.Timeout | null = null;\n\n\t\tif (isRunning && timeLeft > 0) {\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tsetTimeLeft((prev) => {\n\t\t\t\t\tconst newTime = prev - 1000;\n\t\t\t\t\tif (newTime <= 0) {\n\t\t\t\t\t\tsetIsRunning(false);\n\t\t\t\t\t\tonTimeUp?.();\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn newTime;\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (interval) {\n\t\t\t\tclearInterval(interval);\n\t\t\t}\n\t\t};\n\t}, [isRunning, timeLeft, onTimeUp]);\n\n\t// Update running state when exam status changes\n\tuseEffect(() => {\n\t\tsetIsRunning(exam.status === ExamStatus.InProgress);\n\t\tonStatusChange?.(exam.status);\n\t}, [exam.status, onStatusChange]);\n\n\tconst formatTime = useCallback((ms: number): string => {\n\t\tconst totalSeconds = Math.floor(ms / 1000);\n\t\tconst hours = Math.floor(totalSeconds / 3600);\n\t\tconst minutes = Math.floor((totalSeconds % 3600) / 60);\n\t\tconst seconds = totalSeconds % 60;\n\n\t\tif (hours > 0) {\n\t\t\treturn `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n\t\t}\n\t\treturn `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n\t}, []);\n\n\tconst getProgressPercentage = useCallback((): number => {\n\t\tif (!exam) return 0;\n\t\tconst totalTime = exam.period * 60 * 1000; // Convert minutes to milliseconds\n\t\treturn Math.min(100, (elapsedTime / totalTime) * 100);\n\t}, [exam, elapsedTime]);\n\n\treturn {\n\t\ttimeLeft,\n\t\tisRunning,\n\t\telapsedTime,\n\t\tformatTime,\n\t\tgetProgressPercentage,\n\t\tstatus: exam.status,\n\t};\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}