{"ast":null,"code":"import{io}from'socket.io-client';class SocketService{constructor(){this.socket=null;this.examUpdateCallbacks=new Map();this.globalExamUpdateCallbacks=[];}connect(){this.socket=io('http://localhost:3000');this.socket.on('connect',()=>{console.log('Connected to WebSocket server');});this.socket.on('disconnect',()=>{console.log('Disconnected from WebSocket server');});// Listen for all exam update events\nthis.socket.onAny((eventName,exam)=>{console.log('Received event:',eventName,exam);// Check if it's an ExamUpdated event\nif(eventName.startsWith('ExamUpdated-')){const examId=parseInt(eventName.split('-')[1]);console.log('Exam updated via WebSocket:',{examId,exam});// Notify specific exam listeners\nconst callbacks=this.examUpdateCallbacks.get(examId);if(callbacks){callbacks.forEach(callback=>callback(exam));}// Notify global listeners\nthis.globalExamUpdateCallbacks.forEach(callback=>callback(exam));}});}disconnect(){if(this.socket){this.socket.disconnect();this.socket=null;}}// Listen for updates to a specific exam\nonExamUpdate(examId,callback){if(!this.examUpdateCallbacks.has(examId)){this.examUpdateCallbacks.set(examId,[]);}this.examUpdateCallbacks.get(examId).push(callback);}// Remove listener for a specific exam\noffExamUpdate(examId,callback){const callbacks=this.examUpdateCallbacks.get(examId);if(callbacks){const index=callbacks.indexOf(callback);if(index>-1){callbacks.splice(index,1);}}}// Listen for all exam updates\nonGlobalExamUpdate(callback){this.globalExamUpdateCallbacks.push(callback);}// Remove global listener\noffGlobalExamUpdate(callback){const index=this.globalExamUpdateCallbacks.indexOf(callback);if(index>-1){this.globalExamUpdateCallbacks.splice(index,1);}}joinExamRoom(examId){if(this.socket){this.socket.emit('joinExam',{examId});console.log('Joined exam room:',examId);}}leaveExamRoom(examId){if(this.socket){this.socket.emit('leaveExam',{examId});console.log('Left exam room:',examId);}}}export const socketService=new SocketService();export default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","examUpdateCallbacks","Map","globalExamUpdateCallbacks","connect","on","console","log","onAny","eventName","exam","startsWith","examId","parseInt","split","callbacks","get","forEach","callback","disconnect","onExamUpdate","has","set","push","offExamUpdate","index","indexOf","splice","onGlobalExamUpdate","offGlobalExamUpdate","joinExamRoom","emit","leaveExamRoom","socketService"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { Exam } from '../types';\n\nclass SocketService {\n  private socket: Socket | null = null;\n  private examUpdateCallbacks: Map<number, ((exam: Exam) => void)[]> = new Map();\n  private globalExamUpdateCallbacks: ((exam: Exam) => void)[] = [];\n\n  connect() {\n    this.socket = io('http://localhost:3000');\n\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    // Listen for all exam update events\n    this.socket.onAny((eventName: string, exam: Exam) => {\n      console.log('Received event:', eventName, exam);\n      \n      // Check if it's an ExamUpdated event\n      if (eventName.startsWith('ExamUpdated-')) {\n        const examId = parseInt(eventName.split('-')[1]);\n        console.log('Exam updated via WebSocket:', { examId, exam });\n        \n        // Notify specific exam listeners\n        const callbacks = this.examUpdateCallbacks.get(examId);\n        if (callbacks) {\n          callbacks.forEach(callback => callback(exam));\n        }\n        \n        // Notify global listeners\n        this.globalExamUpdateCallbacks.forEach(callback => callback(exam));\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  // Listen for updates to a specific exam\n  onExamUpdate(examId: number, callback: (exam: Exam) => void) {\n    if (!this.examUpdateCallbacks.has(examId)) {\n      this.examUpdateCallbacks.set(examId, []);\n    }\n    this.examUpdateCallbacks.get(examId)!.push(callback);\n  }\n\n  // Remove listener for a specific exam\n  offExamUpdate(examId: number, callback: (exam: Exam) => void) {\n    const callbacks = this.examUpdateCallbacks.get(examId);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  // Listen for all exam updates\n  onGlobalExamUpdate(callback: (exam: Exam) => void) {\n    this.globalExamUpdateCallbacks.push(callback);\n  }\n\n  // Remove global listener\n  offGlobalExamUpdate(callback: (exam: Exam) => void) {\n    const index = this.globalExamUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.globalExamUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  joinExamRoom(examId: number) {\n    if (this.socket) {\n      this.socket.emit('joinExam', { examId });\n      console.log('Joined exam room:', examId);\n    }\n  }\n\n  leaveExamRoom(examId: number) {\n    if (this.socket) {\n      this.socket.emit('leaveExam', { examId });\n      console.log('Left exam room:', examId);\n    }\n  }\n}\n\nexport const socketService = new SocketService();\nexport default socketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}