{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:3000\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log(\"Request with token:\", {\n      url: config.url,\n      method: config.method,\n      hasToken: !!token,\n      tokenLength: token.length\n    });\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$config, _error$config2, _error$response3;\n  console.error(\"API Error:\", {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method\n  });\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post(\"/auth/login\", credentials);\n      console.log(\"Login response:\", response.data);\n\n      // Backend returns { data: { user, accessToken } }, extract and transform\n      const {\n        user,\n        accessToken\n      } = response.data.data;\n\n      // Store the token and user\n      localStorage.setItem(\"access_token\", accessToken);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      return {\n        access_token: accessToken,\n        // Convert accessToken → access_token\n        user: user\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"user\");\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const examService = {\n  getAllExams: async params => {\n    const response = await api.get(\"/exams\", {\n      params\n    });\n    return response.data;\n  },\n  getExamById: async id => {\n    const response = await api.get(`/exams/${id}`);\n    return response.data;\n  },\n  pauseExam: async id => {\n    const response = await api.patch(`/exams/${id}/pause`);\n    return response.data;\n  },\n  unpauseExam: async id => {\n    const response = await api.post(`/exams/${id}/unpause`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","console","log","url","method","hasToken","tokenLength","length","response","error","_error$response","_error$response2","_error$config","_error$config2","_error$response3","status","data","message","removeItem","window","location","href","Promise","reject","authService","login","credentials","post","user","accessToken","setItem","JSON","stringify","access_token","logout","getCurrentUser","userStr","parse","examService","getAllExams","params","get","getExamById","id","pauseExam","patch","unpauseExam"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\nimport { LoginCredentials, LoginResponse, Exam, ApiResponse } from \"../types\";\n\nconst API_BASE_URL = \"http://localhost:3000\";\n\n// Create axios instance\nconst api = axios.create({\n\tbaseURL: API_BASE_URL,\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t},\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use((config) => {\n\tconst token = localStorage.getItem(\"access_token\");\n\tif (token) {\n\t\tconfig.headers.Authorization = `Bearer ${token}`;\n\t\tconsole.log(\"Request with token:\", {\n\t\t\turl: config.url,\n\t\t\tmethod: config.method,\n\t\t\thasToken: !!token,\n\t\t\ttokenLength: token.length,\n\t\t});\n\t}\n\treturn config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n\t(response) => response,\n\t(error) => {\n\t\tconsole.error(\"API Error:\", {\n\t\t\tstatus: error.response?.status,\n\t\t\tdata: error.response?.data,\n\t\t\tmessage: error.message,\n\t\t\turl: error.config?.url,\n\t\t\tmethod: error.config?.method,\n\t\t});\n\n\t\tif (error.response?.status === 401) {\n\t\t\tlocalStorage.removeItem(\"access_token\");\n\t\t\tlocalStorage.removeItem(\"user\");\n\t\t\twindow.location.href = \"/login\";\n\t\t}\n\t\treturn Promise.reject(error);\n\t}\n);\n\nexport const authService = {\n\tlogin: async (credentials: LoginCredentials): Promise<LoginResponse> => {\n\t\ttry {\n\t\t\tconst response = await api.post(\"/auth/login\", credentials);\n\t\t\tconsole.log(\"Login response:\", response.data);\n\n\t\t\t// Backend returns { data: { user, accessToken } }, extract and transform\n\t\t\tconst { user, accessToken } = response.data.data;\n\n\t\t\t// Store the token and user\n\t\t\tlocalStorage.setItem(\"access_token\", accessToken);\n\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(user));\n\n\t\t\treturn {\n\t\t\t\taccess_token: accessToken, // Convert accessToken → access_token\n\t\t\t\tuser: user,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Login error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tlogout: () => {\n\t\tlocalStorage.removeItem(\"access_token\");\n\t\tlocalStorage.removeItem(\"user\");\n\t},\n\n\tgetCurrentUser: () => {\n\t\tconst userStr = localStorage.getItem(\"user\");\n\t\treturn userStr ? JSON.parse(userStr) : null;\n\t},\n};\n\nexport const examService = {\n\tgetAllExams: async (params?: { search?: string; skip?: number; take?: number }): Promise<ApiResponse<Exam[]>> => {\n\t\tconst response = await api.get(\"/exams\", { params });\n\t\treturn response.data;\n\t},\n\n\tgetExamById: async (id: number): Promise<Exam> => {\n\t\tconst response = await api.get(`/exams/${id}`);\n\t\treturn response.data;\n\t},\n\n\tpauseExam: async (id: number): Promise<Exam> => {\n\t\tconst response = await api.patch(`/exams/${id}/pause`);\n\t\treturn response.data;\n\t},\n\n\tunpauseExam: async (id: number): Promise<Exam> => {\n\t\tconst response = await api.post(`/exams/${id}/unpause`);\n\t\treturn response.data;\n\t},\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}