{"ast":null,"code":"import{useState,useEffect,useCallback}from\"react\";import{ExamStatus}from\"../types\";export const useExamTimer=_ref=>{let{exam,onTimeUp,onStatusChange}=_ref;const[timeLeft,setTimeLeft]=useState(0);const[isRunning,setIsRunning]=useState(false);const[elapsedTime,setElapsedTime]=useState(0);// Calculate initial time left\nuseEffect(()=>{if(exam){const now=new Date().getTime();const startTime=new Date(exam.startDate).getTime();const periodMs=exam.period*60*1000;// Convert minutes to milliseconds\nconst totalPausedTimeMs=(exam.totalPausedTime||0)*1000;// Convert seconds to milliseconds\n// Calculate elapsed time considering pauses\nlet elapsed=0;if(exam.status===ExamStatus.InProgress){elapsed=now-startTime-totalPausedTimeMs;}else if(exam.status===ExamStatus.Paused&&exam.pausedAt){const pauseTime=new Date(exam.pausedAt).getTime();elapsed=pauseTime-startTime-totalPausedTimeMs;}const remaining=Math.max(0,periodMs-elapsed);setTimeLeft(remaining);setElapsedTime(elapsed);setIsRunning(exam.status===ExamStatus.InProgress);console.log(\"Timer calculation:\",{now:new Date(now).toISOString(),startTime:new Date(startTime).toISOString(),periodMs,totalPausedTimeMs,elapsed,remaining,examStatus:exam.status});}},[exam]);// Timer effect\nuseEffect(()=>{let interval=null;if(isRunning&&timeLeft>0){interval=setInterval(()=>{setTimeLeft(prev=>{const newTime=prev-1000;if(newTime<=0){setIsRunning(false);onTimeUp===null||onTimeUp===void 0?void 0:onTimeUp();return 0;}return newTime;});},1000);}return()=>{if(interval){clearInterval(interval);}};},[isRunning,timeLeft,onTimeUp]);// Update running state when exam status changes\nuseEffect(()=>{setIsRunning(exam.status===ExamStatus.InProgress);onStatusChange===null||onStatusChange===void 0?void 0:onStatusChange(exam.status);},[exam.status,onStatusChange]);const formatTime=useCallback(ms=>{const totalSeconds=Math.floor(ms/1000);const hours=Math.floor(totalSeconds/3600);const minutes=Math.floor(totalSeconds%3600/60);const seconds=totalSeconds%60;if(hours>0){return\"\".concat(hours.toString().padStart(2,\"0\"),\":\").concat(minutes.toString().padStart(2,\"0\"),\":\").concat(seconds.toString().padStart(2,\"0\"));}return\"\".concat(minutes.toString().padStart(2,\"0\"),\":\").concat(seconds.toString().padStart(2,\"0\"));},[]);const getProgressPercentage=useCallback(()=>{if(!exam)return 0;const totalTime=exam.period*60*1000;// Convert minutes to milliseconds\nreturn Math.min(100,elapsedTime/totalTime*100);},[exam,elapsedTime]);return{timeLeft,isRunning,elapsedTime,formatTime,getProgressPercentage,status:exam.status};};","map":{"version":3,"names":["useState","useEffect","useCallback","ExamStatus","useExamTimer","_ref","exam","onTimeUp","onStatusChange","timeLeft","setTimeLeft","isRunning","setIsRunning","elapsedTime","setElapsedTime","now","Date","getTime","startTime","startDate","periodMs","period","totalPausedTimeMs","totalPausedTime","elapsed","status","InProgress","Paused","pausedAt","pauseTime","remaining","Math","max","console","log","toISOString","examStatus","interval","setInterval","prev","newTime","clearInterval","formatTime","ms","totalSeconds","floor","hours","minutes","seconds","concat","toString","padStart","getProgressPercentage","totalTime","min"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/hooks/useExamTimer.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Exam, ExamStatus } from \"../types\";\n\ninterface UseExamTimerProps {\n\texam: Exam;\n\tonTimeUp?: () => void;\n\tonStatusChange?: (status: ExamStatus) => void;\n}\n\nexport const useExamTimer = ({ exam, onTimeUp, onStatusChange }: UseExamTimerProps) => {\n\tconst [timeLeft, setTimeLeft] = useState<number>(0);\n\tconst [isRunning, setIsRunning] = useState<boolean>(false);\n\tconst [elapsedTime, setElapsedTime] = useState<number>(0);\n\n\t// Calculate initial time left\n\tuseEffect(() => {\n\t\tif (exam) {\n\t\t\tconst now = new Date().getTime();\n\t\t\tconst startTime = new Date(exam.startDate).getTime();\n\t\t\tconst periodMs = exam.period * 60 * 1000; // Convert minutes to milliseconds\n\t\t\tconst totalPausedTimeMs = (exam.totalPausedTime || 0) * 1000; // Convert seconds to milliseconds\n\n\t\t\t// Calculate elapsed time considering pauses\n\t\t\tlet elapsed = 0;\n\t\t\tif (exam.status === ExamStatus.InProgress) {\n\t\t\t\telapsed = now - startTime - totalPausedTimeMs;\n\t\t\t} else if (exam.status === ExamStatus.Paused && exam.pausedAt) {\n\t\t\t\tconst pauseTime = new Date(exam.pausedAt).getTime();\n\t\t\t\telapsed = pauseTime - startTime - totalPausedTimeMs;\n\t\t\t}\n\n\t\t\tconst remaining = Math.max(0, periodMs - elapsed);\n\t\t\tsetTimeLeft(remaining);\n\t\t\tsetElapsedTime(elapsed);\n\t\t\tsetIsRunning(exam.status === ExamStatus.InProgress);\n\n\t\t\tconsole.log(\"Timer calculation:\", {\n\t\t\t\tnow: new Date(now).toISOString(),\n\t\t\t\tstartTime: new Date(startTime).toISOString(),\n\t\t\t\tperiodMs,\n\t\t\t\ttotalPausedTimeMs,\n\t\t\t\telapsed,\n\t\t\t\tremaining,\n\t\t\t\texamStatus: exam.status,\n\t\t\t});\n\t\t}\n\t}, [exam]);\n\n\t// Timer effect\n\tuseEffect(() => {\n\t\tlet interval: NodeJS.Timeout | null = null;\n\n\t\tif (isRunning && timeLeft > 0) {\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tsetTimeLeft((prev) => {\n\t\t\t\t\tconst newTime = prev - 1000;\n\t\t\t\t\tif (newTime <= 0) {\n\t\t\t\t\t\tsetIsRunning(false);\n\t\t\t\t\t\tonTimeUp?.();\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn newTime;\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (interval) {\n\t\t\t\tclearInterval(interval);\n\t\t\t}\n\t\t};\n\t}, [isRunning, timeLeft, onTimeUp]);\n\n\t// Update running state when exam status changes\n\tuseEffect(() => {\n\t\tsetIsRunning(exam.status === ExamStatus.InProgress);\n\t\tonStatusChange?.(exam.status);\n\t}, [exam.status, onStatusChange]);\n\n\tconst formatTime = useCallback((ms: number): string => {\n\t\tconst totalSeconds = Math.floor(ms / 1000);\n\t\tconst hours = Math.floor(totalSeconds / 3600);\n\t\tconst minutes = Math.floor((totalSeconds % 3600) / 60);\n\t\tconst seconds = totalSeconds % 60;\n\n\t\tif (hours > 0) {\n\t\t\treturn `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n\t\t}\n\t\treturn `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n\t}, []);\n\n\tconst getProgressPercentage = useCallback((): number => {\n\t\tif (!exam) return 0;\n\t\tconst totalTime = exam.period * 60 * 1000; // Convert minutes to milliseconds\n\t\treturn Math.min(100, (elapsedTime / totalTime) * 100);\n\t}, [exam, elapsedTime]);\n\n\treturn {\n\t\ttimeLeft,\n\t\tisRunning,\n\t\telapsedTime,\n\t\tformatTime,\n\t\tgetProgressPercentage,\n\t\tstatus: exam.status,\n\t};\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}