{"ast":null,"code":"import { io } from \"socket.io-client\";\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.examUpdateCallbacks = new Map();\n    this.globalExamUpdateCallbacks = [];\n  }\n  connect() {\n    try {\n      console.log(\"Attempting to connect to WebSocket server at http://localhost:3000\");\n      this.socket = io(\"http://localhost:3000\", {\n        transports: ['websocket', 'polling'],\n        timeout: 10000,\n        forceNew: true\n      });\n      this.socket.on(\"connect\", () => {\n        var _this$socket;\n        console.log(\"‚úÖ Connected to WebSocket server with ID:\", (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id);\n      });\n      this.socket.on(\"connect_error\", error => {\n        console.error(\"‚ùå WebSocket connection error:\", error);\n      });\n      this.socket.on(\"disconnect\", reason => {\n        console.log(\"üîå Disconnected from WebSocket server. Reason:\", reason);\n      });\n      this.socket.on(\"error\", error => {\n        console.error(\"‚ùå WebSocket error:\", error);\n      });\n\n      // Listen for all exam update events\n      this.socket.onAny((eventName, exam) => {\n        console.log(\"üì° Received WebSocket event:\", eventName, exam);\n\n        // Check if it's an ExamUpdated event\n        if (eventName.startsWith(\"ExamUpdated-\")) {\n          const examId = parseInt(eventName.split(\"-\")[1]);\n          console.log(\"üéØ Exam updated via WebSocket:\", {\n            examId,\n            exam\n          });\n\n          // Notify specific exam listeners\n          const callbacks = this.examUpdateCallbacks.get(examId);\n          if (callbacks) {\n            console.log(`üîî Notifying ${callbacks.length} listeners for exam ${examId}`);\n            callbacks.forEach(callback => callback(exam));\n          }\n\n          // Notify global listeners\n          console.log(`üîî Notifying ${this.globalExamUpdateCallbacks.length} global listeners`);\n          this.globalExamUpdateCallbacks.forEach(callback => callback(exam));\n        }\n      });\n    } catch (error) {\n      console.error(\"‚ùå Failed to create WebSocket connection:\", error);\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      console.log(\"üîå Disconnecting from WebSocket server\");\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  // Listen for updates to a specific exam\n  onExamUpdate(examId, callback) {\n    if (!this.examUpdateCallbacks.has(examId)) {\n      this.examUpdateCallbacks.set(examId, []);\n    }\n    this.examUpdateCallbacks.get(examId).push(callback);\n    console.log(`üëÇ Added listener for exam ${examId}. Total listeners: ${this.examUpdateCallbacks.get(examId).length}`);\n  }\n\n  // Remove listener for a specific exam\n  offExamUpdate(examId, callback) {\n    const callbacks = this.examUpdateCallbacks.get(examId);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n        console.log(`üëã Removed listener for exam ${examId}. Remaining listeners: ${callbacks.length}`);\n      }\n    }\n  }\n\n  // Listen for all exam updates\n  onGlobalExamUpdate(callback) {\n    this.globalExamUpdateCallbacks.push(callback);\n    console.log(`üëÇ Added global exam listener. Total global listeners: ${this.globalExamUpdateCallbacks.length}`);\n  }\n\n  // Remove global listener\n  offGlobalExamUpdate(callback) {\n    const index = this.globalExamUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.globalExamUpdateCallbacks.splice(index, 1);\n      console.log(`üëã Removed global exam listener. Remaining global listeners: ${this.globalExamUpdateCallbacks.length}`);\n    }\n  }\n  joinExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit(\"joinExam\", {\n        examId\n      });\n      console.log(\"üö™ Joined exam room:\", examId);\n    } else {\n      console.warn(\"‚ö†Ô∏è Cannot join exam room: WebSocket not connected\");\n    }\n  }\n  leaveExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit(\"leaveExam\", {\n        examId\n      });\n      console.log(\"üö™ Left exam room:\", examId);\n    }\n  }\n\n  // Check if connected\n  isConnected() {\n    var _this$socket2;\n    return ((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.connected) || false;\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    if (!this.socket) return \"Not initialized\";\n    if (this.socket.connected) return \"Connected\";\n    return \"Disconnected\";\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","examUpdateCallbacks","Map","globalExamUpdateCallbacks","connect","console","log","transports","timeout","forceNew","on","_this$socket","id","error","reason","onAny","eventName","exam","startsWith","examId","parseInt","split","callbacks","get","length","forEach","callback","disconnect","onExamUpdate","has","set","push","offExamUpdate","index","indexOf","splice","onGlobalExamUpdate","offGlobalExamUpdate","joinExamRoom","emit","warn","leaveExamRoom","isConnected","_this$socket2","connected","getConnectionStatus","socketService"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from \"socket.io-client\";\nimport { Exam } from \"../types\";\n\nclass SocketService {\n\tprivate socket: Socket | null = null;\n\tprivate examUpdateCallbacks: Map<number, ((exam: Exam) => void)[]> = new Map();\n\tprivate globalExamUpdateCallbacks: ((exam: Exam) => void)[] = [];\n\n\tconnect() {\n\t\ttry {\n\t\t\tconsole.log(\"Attempting to connect to WebSocket server at http://localhost:3000\");\n\t\t\t\n\t\t\tthis.socket = io(\"http://localhost:3000\", {\n\t\t\t\ttransports: ['websocket', 'polling'],\n\t\t\t\ttimeout: 10000,\n\t\t\t\tforceNew: true\n\t\t\t});\n\n\t\t\tthis.socket.on(\"connect\", () => {\n\t\t\t\tconsole.log(\"‚úÖ Connected to WebSocket server with ID:\", this.socket?.id);\n\t\t\t});\n\n\t\t\tthis.socket.on(\"connect_error\", (error) => {\n\t\t\t\tconsole.error(\"‚ùå WebSocket connection error:\", error);\n\t\t\t});\n\n\t\t\tthis.socket.on(\"disconnect\", (reason) => {\n\t\t\t\tconsole.log(\"üîå Disconnected from WebSocket server. Reason:\", reason);\n\t\t\t});\n\n\t\t\tthis.socket.on(\"error\", (error) => {\n\t\t\t\tconsole.error(\"‚ùå WebSocket error:\", error);\n\t\t\t});\n\n\t\t\t// Listen for all exam update events\n\t\t\tthis.socket.onAny((eventName: string, exam: Exam) => {\n\t\t\t\tconsole.log(\"üì° Received WebSocket event:\", eventName, exam);\n\n\t\t\t\t// Check if it's an ExamUpdated event\n\t\t\t\tif (eventName.startsWith(\"ExamUpdated-\")) {\n\t\t\t\t\tconst examId = parseInt(eventName.split(\"-\")[1]);\n\t\t\t\t\tconsole.log(\"üéØ Exam updated via WebSocket:\", { examId, exam });\n\n\t\t\t\t\t// Notify specific exam listeners\n\t\t\t\t\tconst callbacks = this.examUpdateCallbacks.get(examId);\n\t\t\t\t\tif (callbacks) {\n\t\t\t\t\t\tconsole.log(`üîî Notifying ${callbacks.length} listeners for exam ${examId}`);\n\t\t\t\t\t\tcallbacks.forEach((callback) => callback(exam));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Notify global listeners\n\t\t\t\t\tconsole.log(`üîî Notifying ${this.globalExamUpdateCallbacks.length} global listeners`);\n\t\t\t\t\tthis.globalExamUpdateCallbacks.forEach((callback) => callback(exam));\n\t\t\t\t}\n\t\t\t});\n\n\t\t} catch (error) {\n\t\t\tconsole.error(\"‚ùå Failed to create WebSocket connection:\", error);\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.socket) {\n\t\t\tconsole.log(\"üîå Disconnecting from WebSocket server\");\n\t\t\tthis.socket.disconnect();\n\t\t\tthis.socket = null;\n\t\t}\n\t}\n\n\t// Listen for updates to a specific exam\n\tonExamUpdate(examId: number, callback: (exam: Exam) => void) {\n\t\tif (!this.examUpdateCallbacks.has(examId)) {\n\t\t\tthis.examUpdateCallbacks.set(examId, []);\n\t\t}\n\t\tthis.examUpdateCallbacks.get(examId)!.push(callback);\n\t\tconsole.log(`üëÇ Added listener for exam ${examId}. Total listeners: ${this.examUpdateCallbacks.get(examId)!.length}`);\n\t}\n\n\t// Remove listener for a specific exam\n\toffExamUpdate(examId: number, callback: (exam: Exam) => void) {\n\t\tconst callbacks = this.examUpdateCallbacks.get(examId);\n\t\tif (callbacks) {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index > -1) {\n\t\t\t\tcallbacks.splice(index, 1);\n\t\t\t\tconsole.log(`üëã Removed listener for exam ${examId}. Remaining listeners: ${callbacks.length}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Listen for all exam updates\n\tonGlobalExamUpdate(callback: (exam: Exam) => void) {\n\t\tthis.globalExamUpdateCallbacks.push(callback);\n\t\tconsole.log(`üëÇ Added global exam listener. Total global listeners: ${this.globalExamUpdateCallbacks.length}`);\n\t}\n\n\t// Remove global listener\n\toffGlobalExamUpdate(callback: (exam: Exam) => void) {\n\t\tconst index = this.globalExamUpdateCallbacks.indexOf(callback);\n\t\tif (index > -1) {\n\t\t\tthis.globalExamUpdateCallbacks.splice(index, 1);\n\t\t\tconsole.log(`üëã Removed global exam listener. Remaining global listeners: ${this.globalExamUpdateCallbacks.length}`);\n\t\t}\n\t}\n\n\tjoinExamRoom(examId: number) {\n\t\tif (this.socket) {\n\t\t\tthis.socket.emit(\"joinExam\", { examId });\n\t\t\tconsole.log(\"üö™ Joined exam room:\", examId);\n\t\t} else {\n\t\t\tconsole.warn(\"‚ö†Ô∏è Cannot join exam room: WebSocket not connected\");\n\t\t}\n\t}\n\n\tleaveExamRoom(examId: number) {\n\t\tif (this.socket) {\n\t\t\tthis.socket.emit(\"leaveExam\", { examId });\n\t\t\tconsole.log(\"üö™ Left exam room:\", examId);\n\t\t}\n\t}\n\n\t// Check if connected\n\tisConnected(): boolean {\n\t\treturn this.socket?.connected || false;\n\t}\n\n\t// Get connection status\n\tgetConnectionStatus(): string {\n\t\tif (!this.socket) return \"Not initialized\";\n\t\tif (this.socket.connected) return \"Connected\";\n\t\treturn \"Disconnected\";\n\t}\n}\n\nexport const socketService = new SocketService();\nexport default socketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}