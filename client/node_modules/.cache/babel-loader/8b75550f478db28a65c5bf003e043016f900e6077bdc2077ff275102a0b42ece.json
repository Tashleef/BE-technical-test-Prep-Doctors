{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.examUpdateCallbacks = [];\n  }\n  connect() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    // Listen for exam updates\n    this.socket.on('EventUpdated', exam => {\n      console.log('Exam updated:', exam);\n      this.examUpdateCallbacks.forEach(callback => callback(exam));\n    });\n\n    // Listen for specific exam updates (using pattern matching)\n    this.socket.onAny((eventName, exam) => {\n      if (eventName.startsWith('EventUpdated-')) {\n        console.log('Specific exam updated:', exam);\n        this.examUpdateCallbacks.forEach(callback => callback(exam));\n      }\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  onExamUpdate(callback) {\n    this.examUpdateCallbacks.push(callback);\n  }\n  offExamUpdate(callback) {\n    const index = this.examUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.examUpdateCallbacks.splice(index, 1);\n    }\n  }\n  joinExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit('joinExam', {\n        examId\n      });\n    }\n  }\n  leaveExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit('leaveExam', {\n        examId\n      });\n    }\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","examUpdateCallbacks","connect","on","console","log","exam","forEach","callback","onAny","eventName","startsWith","disconnect","onExamUpdate","push","offExamUpdate","index","indexOf","splice","joinExamRoom","examId","emit","leaveExamRoom","socketService"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { Exam } from '../types';\n\nclass SocketService {\n  private socket: Socket | null = null;\n  private examUpdateCallbacks: ((exam: Exam) => void)[] = [];\n\n  connect() {\n    this.socket = io('http://localhost:3000');\n\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    // Listen for exam updates\n    this.socket.on('EventUpdated', (exam: Exam) => {\n      console.log('Exam updated:', exam);\n      this.examUpdateCallbacks.forEach((callback) => callback(exam));\n    });\n\n    // Listen for specific exam updates (using pattern matching)\n    this.socket.onAny((eventName: string, exam: Exam) => {\n      if (eventName.startsWith('EventUpdated-')) {\n        console.log('Specific exam updated:', exam);\n        this.examUpdateCallbacks.forEach((callback) => callback(exam));\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  onExamUpdate(callback: (exam: Exam) => void) {\n    this.examUpdateCallbacks.push(callback);\n  }\n\n  offExamUpdate(callback: (exam: Exam) => void) {\n    const index = this.examUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.examUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  joinExamRoom(examId: number) {\n    if (this.socket) {\n      this.socket.emit('joinExam', { examId });\n    }\n  }\n\n  leaveExamRoom(examId: number) {\n    if (this.socket) {\n      this.socket.emit('leaveExam', { examId });\n    }\n  }\n}\n\nexport const socketService = new SocketService();\nexport default socketService;\n"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAG7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACVC,MAAM,GAAkB,IAAI;IAAA,KAC5BC,mBAAmB,GAA6B,EAAE;EAAA;EAE1DC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC;IAEzC,IAAI,CAACG,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,MAAM;MAC9BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACL,MAAM,CAACG,EAAE,CAAC,YAAY,EAAE,MAAM;MACjCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACnD,CAAC,CAAC;;IAEF;IACA,IAAI,CAACL,MAAM,CAACG,EAAE,CAAC,cAAc,EAAGG,IAAU,IAAK;MAC7CF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,IAAI,CAAC;MAClC,IAAI,CAACL,mBAAmB,CAACM,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,IAAI,CAAC,CAAC;IAChE,CAAC,CAAC;;IAEF;IACA,IAAI,CAACN,MAAM,CAACS,KAAK,CAAC,CAACC,SAAiB,EAAEJ,IAAU,KAAK;MACnD,IAAII,SAAS,CAACC,UAAU,CAAC,eAAe,CAAC,EAAE;QACzCP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,IAAI,CAAC;QAC3C,IAAI,CAACL,mBAAmB,CAACM,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,IAAI,CAAC,CAAC;MAChE;IACF,CAAC,CAAC;EACJ;EAEAM,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACZ,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACY,UAAU,CAAC,CAAC;MACxB,IAAI,CAACZ,MAAM,GAAG,IAAI;IACpB;EACF;EAEAa,YAAYA,CAACL,QAA8B,EAAE;IAC3C,IAAI,CAACP,mBAAmB,CAACa,IAAI,CAACN,QAAQ,CAAC;EACzC;EAEAO,aAAaA,CAACP,QAA8B,EAAE;IAC5C,MAAMQ,KAAK,GAAG,IAAI,CAACf,mBAAmB,CAACgB,OAAO,CAACT,QAAQ,CAAC;IACxD,IAAIQ,KAAK,GAAG,CAAC,CAAC,EAAE;MACd,IAAI,CAACf,mBAAmB,CAACiB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC3C;EACF;EAEAG,YAAYA,CAACC,MAAc,EAAE;IAC3B,IAAI,IAAI,CAACpB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACqB,IAAI,CAAC,UAAU,EAAE;QAAED;MAAO,CAAC,CAAC;IAC1C;EACF;EAEAE,aAAaA,CAACF,MAAc,EAAE;IAC5B,IAAI,IAAI,CAACpB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACqB,IAAI,CAAC,WAAW,EAAE;QAAED;MAAO,CAAC,CAAC;IAC3C;EACF;AACF;AAEA,OAAO,MAAMG,aAAa,GAAG,IAAIzB,aAAa,CAAC,CAAC;AAChD,eAAeyB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}