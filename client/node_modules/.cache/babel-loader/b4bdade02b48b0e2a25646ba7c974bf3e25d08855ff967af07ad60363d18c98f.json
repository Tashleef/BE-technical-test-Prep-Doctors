{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async credentials => {\n    try {\n      // Use fetch instead of axios to avoid CORS preflight issues\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Login response:', data);\n\n      // Backend returns { data: { user, accessToken } }, extract and transform\n      const {\n        user,\n        accessToken\n      } = data.data;\n\n      // Store the token and user\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        access_token: accessToken,\n        // Convert accessToken → access_token\n        user: user\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const examService = {\n  getAllExams: async params => {\n    const response = await api.get('/exams', {\n      params\n    });\n    return response.data;\n  },\n  getExamById: async id => {\n    const response = await api.get(`/exams/${id}`);\n    return response.data;\n  },\n  pauseExam: async id => {\n    const response = await api.patch(`/exams/${id}/pause`);\n    return response.data;\n  },\n  unpauseExam: async id => {\n    const response = await api.post(`/exams/${id}/unpause`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","fetch","method","body","JSON","stringify","ok","Error","data","json","console","log","user","accessToken","setItem","access_token","logout","getCurrentUser","userStr","parse","examService","getAllExams","params","get","getExamById","id","pauseExam","patch","unpauseExam","post"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { LoginCredentials, LoginResponse, Exam, ApiResponse } from '../types';\n\nconst API_BASE_URL = 'http://localhost:3000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  },\n);\n\nexport const authService = {\n\tlogin: async (credentials: LoginCredentials): Promise<LoginResponse> => {\n\t\ttry {\n\t\t\t// Use fetch instead of axios to avoid CORS preflight issues\n\t\t\tconst response = await fetch(`${API_BASE_URL}/auth/login`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(credentials),\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log('Login response:', data);\n\t\t\t\n\t\t\t// Backend returns { data: { user, accessToken } }, extract and transform\n\t\t\tconst { user, accessToken } = data.data;\n\t\t\t\n\t\t\t// Store the token and user\n\t\t\tlocalStorage.setItem('access_token', accessToken);\n\t\t\tlocalStorage.setItem('user', JSON.stringify(user));\n\t\t\t\n\t\t\treturn {\n\t\t\t\taccess_token: accessToken, // Convert accessToken → access_token\n\t\t\t\tuser: user\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error('Login error:', error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tlogout: () => {\n\t\tlocalStorage.removeItem('access_token');\n\t\tlocalStorage.removeItem('user');\n\t},\n\n\tgetCurrentUser: () => {\n\t\tconst userStr = localStorage.getItem('user');\n\t\treturn userStr ? JSON.parse(userStr) : null;\n\t},\n};\n\nexport const examService = {\n  getAllExams: async (params?: {\n    search?: string;\n    skip?: number;\n    take?: number;\n  }): Promise<ApiResponse<Exam[]>> => {\n    const response = await api.get('/exams', { params });\n    return response.data;\n  },\n\n  getExamById: async (id: number): Promise<Exam> => {\n    const response = await api.get(`/exams/${id}`);\n    return response.data;\n  },\n\n  pauseExam: async (id: number): Promise<Exam> => {\n    const response = await api.patch(`/exams/${id}/pause`);\n    return response.data;\n  },\n\n  unpauseExam: async (id: number): Promise<Exam> => {\n    const response = await api.post(`/exams/${id}/unpause`);\n    return response.data;\n  },\n};\n\nexport default api;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}