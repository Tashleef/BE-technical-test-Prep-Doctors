{"ast":null,"code":"import { io } from \"socket.io-client\";\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.examUpdateCallbacks = new Map();\n    this.globalExamUpdateCallbacks = [];\n  }\n  connect() {\n    this.socket = io(\"http://localhost:3000\");\n    this.socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\");\n    });\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\");\n    });\n\n    // Listen for all exam update events\n    this.socket.onAny((eventName, exam) => {\n      console.log(\"Received event:\", eventName, exam);\n\n      // Check if it's an ExamUpdated event\n      if (eventName.startsWith(\"ExamUpdated-\")) {\n        const examId = parseInt(eventName.split(\"-\")[1]);\n        console.log(\"Exam updated via WebSocket:\", {\n          examId,\n          exam\n        });\n\n        // Notify specific exam listeners\n        const callbacks = this.examUpdateCallbacks.get(examId);\n        if (callbacks) {\n          callbacks.forEach(callback => callback(exam));\n        }\n\n        // Notify global listeners\n        this.globalExamUpdateCallbacks.forEach(callback => callback(exam));\n      }\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  // Listen for updates to a specific exam\n  onExamUpdate(examId, callback) {\n    if (!this.examUpdateCallbacks.has(examId)) {\n      this.examUpdateCallbacks.set(examId, []);\n    }\n    this.examUpdateCallbacks.get(examId).push(callback);\n  }\n\n  // Remove listener for a specific exam\n  offExamUpdate(examId, callback) {\n    const callbacks = this.examUpdateCallbacks.get(examId);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  // Listen for all exam updates\n  onGlobalExamUpdate(callback) {\n    this.globalExamUpdateCallbacks.push(callback);\n  }\n\n  // Remove global listener\n  offGlobalExamUpdate(callback) {\n    const index = this.globalExamUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.globalExamUpdateCallbacks.splice(index, 1);\n    }\n  }\n  joinExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit(\"joinExam\", {\n        examId\n      });\n      console.log(\"Joined exam room:\", examId);\n    }\n  }\n  leaveExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit(\"leaveExam\", {\n        examId\n      });\n      console.log(\"Left exam room:\", examId);\n    }\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","examUpdateCallbacks","Map","globalExamUpdateCallbacks","connect","on","console","log","onAny","eventName","exam","startsWith","examId","parseInt","split","callbacks","get","forEach","callback","disconnect","onExamUpdate","has","set","push","offExamUpdate","index","indexOf","splice","onGlobalExamUpdate","offGlobalExamUpdate","joinExamRoom","emit","leaveExamRoom","socketService"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from \"socket.io-client\";\nimport { Exam } from \"../types\";\n\nclass SocketService {\n\tprivate socket: Socket | null = null;\n\tprivate examUpdateCallbacks: Map<number, ((exam: Exam) => void)[]> = new Map();\n\tprivate globalExamUpdateCallbacks: ((exam: Exam) => void)[] = [];\n\n\tconnect() {\n\t\tthis.socket = io(\"http://localhost:3000\");\n\n\t\tthis.socket.on(\"connect\", () => {\n\t\t\tconsole.log(\"Connected to WebSocket server\");\n\t\t});\n\n\t\tthis.socket.on(\"disconnect\", () => {\n\t\t\tconsole.log(\"Disconnected from WebSocket server\");\n\t\t});\n\n\t\t// Listen for all exam update events\n\t\tthis.socket.onAny((eventName: string, exam: Exam) => {\n\t\t\tconsole.log(\"Received event:\", eventName, exam);\n\n\t\t\t// Check if it's an ExamUpdated event\n\t\t\tif (eventName.startsWith(\"ExamUpdated-\")) {\n\t\t\t\tconst examId = parseInt(eventName.split(\"-\")[1]);\n\t\t\t\tconsole.log(\"Exam updated via WebSocket:\", { examId, exam });\n\n\t\t\t\t// Notify specific exam listeners\n\t\t\t\tconst callbacks = this.examUpdateCallbacks.get(examId);\n\t\t\t\tif (callbacks) {\n\t\t\t\t\tcallbacks.forEach((callback) => callback(exam));\n\t\t\t\t}\n\n\t\t\t\t// Notify global listeners\n\t\t\t\tthis.globalExamUpdateCallbacks.forEach((callback) => callback(exam));\n\t\t\t}\n\t\t});\n\t}\n\n\tdisconnect() {\n\t\tif (this.socket) {\n\t\t\tthis.socket.disconnect();\n\t\t\tthis.socket = null;\n\t\t}\n\t}\n\n\t// Listen for updates to a specific exam\n\tonExamUpdate(examId: number, callback: (exam: Exam) => void) {\n\t\tif (!this.examUpdateCallbacks.has(examId)) {\n\t\t\tthis.examUpdateCallbacks.set(examId, []);\n\t\t}\n\t\tthis.examUpdateCallbacks.get(examId)!.push(callback);\n\t}\n\n\t// Remove listener for a specific exam\n\toffExamUpdate(examId: number, callback: (exam: Exam) => void) {\n\t\tconst callbacks = this.examUpdateCallbacks.get(examId);\n\t\tif (callbacks) {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index > -1) {\n\t\t\t\tcallbacks.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Listen for all exam updates\n\tonGlobalExamUpdate(callback: (exam: Exam) => void) {\n\t\tthis.globalExamUpdateCallbacks.push(callback);\n\t}\n\n\t// Remove global listener\n\toffGlobalExamUpdate(callback: (exam: Exam) => void) {\n\t\tconst index = this.globalExamUpdateCallbacks.indexOf(callback);\n\t\tif (index > -1) {\n\t\t\tthis.globalExamUpdateCallbacks.splice(index, 1);\n\t\t}\n\t}\n\n\tjoinExamRoom(examId: number) {\n\t\tif (this.socket) {\n\t\t\tthis.socket.emit(\"joinExam\", { examId });\n\t\t\tconsole.log(\"Joined exam room:\", examId);\n\t\t}\n\t}\n\n\tleaveExamRoom(examId: number) {\n\t\tif (this.socket) {\n\t\t\tthis.socket.emit(\"leaveExam\", { examId });\n\t\t\tconsole.log(\"Left exam room:\", examId);\n\t\t}\n\t}\n}\n\nexport const socketService = new SocketService();\nexport default socketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}