{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { ExamStatus } from '../types';\nexport const useExamTimer = ({\n  exam,\n  onTimeUp,\n  onStatusChange\n}) => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // Calculate initial time left\n  useEffect(() => {\n    if (exam) {\n      const now = new Date().getTime();\n      const startTime = new Date(exam.startDate).getTime();\n      const periodMs = exam.period * 60 * 1000; // Convert minutes to milliseconds\n      const totalPausedTime = exam.totalPausedTime || 0;\n\n      // Calculate elapsed time considering pauses\n      let elapsed = 0;\n      if (exam.status === ExamStatus.InProgress) {\n        elapsed = now - startTime - totalPausedTime;\n      } else if (exam.status === ExamStatus.Paused && exam.pausedAt) {\n        const pauseTime = new Date(exam.pausedAt).getTime();\n        elapsed = pauseTime - startTime - totalPausedTime;\n      }\n      const remaining = Math.max(0, periodMs - elapsed);\n      setTimeLeft(remaining);\n      setElapsedTime(elapsed);\n      setIsRunning(exam.status === ExamStatus.InProgress);\n    }\n  }, [exam]);\n\n  // Timer effect\n  useEffect(() => {\n    let interval = null;\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft(prev => {\n          const newTime = prev - 1000;\n          if (newTime <= 0) {\n            setIsRunning(false);\n            onTimeUp === null || onTimeUp === void 0 ? void 0 : onTimeUp();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning, timeLeft, onTimeUp]);\n\n  // Update running state when exam status changes\n  useEffect(() => {\n    setIsRunning(exam.status === ExamStatus.InProgress);\n    onStatusChange === null || onStatusChange === void 0 ? void 0 : onStatusChange(exam.status);\n  }, [exam.status, onStatusChange]);\n  const formatTime = useCallback(ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    const seconds = totalSeconds % 60;\n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }, []);\n  const getProgressPercentage = useCallback(() => {\n    if (!exam) return 0;\n    const totalTime = exam.period * 60 * 1000;\n    return Math.min(100, elapsedTime / totalTime * 100);\n  }, [exam, elapsedTime]);\n  return {\n    timeLeft,\n    isRunning,\n    elapsedTime,\n    formatTime,\n    getProgressPercentage,\n    status: exam.status\n  };\n};\n_s(useExamTimer, \"Oqwb2y9ffe6VqtZ3LGN6fUVJRvA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","ExamStatus","useExamTimer","exam","onTimeUp","onStatusChange","_s","timeLeft","setTimeLeft","isRunning","setIsRunning","elapsedTime","setElapsedTime","now","Date","getTime","startTime","startDate","periodMs","period","totalPausedTime","elapsed","status","InProgress","Paused","pausedAt","pauseTime","remaining","Math","max","interval","setInterval","prev","newTime","clearInterval","formatTime","ms","totalSeconds","floor","hours","minutes","seconds","toString","padStart","getProgressPercentage","totalTime","min"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/hooks/useExamTimer.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Exam, ExamStatus } from '../types';\n\ninterface UseExamTimerProps {\n  exam: Exam;\n  onTimeUp?: () => void;\n  onStatusChange?: (status: ExamStatus) => void;\n}\n\nexport const useExamTimer = ({\n  exam,\n  onTimeUp,\n  onStatusChange,\n}: UseExamTimerProps) => {\n  const [timeLeft, setTimeLeft] = useState<number>(0);\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n  const [elapsedTime, setElapsedTime] = useState<number>(0);\n\n  // Calculate initial time left\n  useEffect(() => {\n    if (exam) {\n      const now = new Date().getTime();\n      const startTime = new Date(exam.startDate).getTime();\n      const periodMs = exam.period * 60 * 1000; // Convert minutes to milliseconds\n      const totalPausedTime = exam.totalPausedTime || 0;\n\n      // Calculate elapsed time considering pauses\n      let elapsed = 0;\n      if (exam.status === ExamStatus.InProgress) {\n        elapsed = now - startTime - totalPausedTime;\n      } else if (exam.status === ExamStatus.Paused && exam.pausedAt) {\n        const pauseTime = new Date(exam.pausedAt).getTime();\n        elapsed = pauseTime - startTime - totalPausedTime;\n      }\n\n      const remaining = Math.max(0, periodMs - elapsed);\n      setTimeLeft(remaining);\n      setElapsedTime(elapsed);\n      setIsRunning(exam.status === ExamStatus.InProgress);\n    }\n  }, [exam]);\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft((prev) => {\n          const newTime = prev - 1000;\n          if (newTime <= 0) {\n            setIsRunning(false);\n            onTimeUp?.();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning, timeLeft, onTimeUp]);\n\n  // Update running state when exam status changes\n  useEffect(() => {\n    setIsRunning(exam.status === ExamStatus.InProgress);\n    onStatusChange?.(exam.status);\n  }, [exam.status, onStatusChange]);\n\n  const formatTime = useCallback((ms: number): string => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n\n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes\n        .toString()\n        .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes.toString().padStart(2, '0')}:${seconds\n      .toString()\n      .padStart(2, '0')}`;\n  }, []);\n\n  const getProgressPercentage = useCallback((): number => {\n    if (!exam) return 0;\n    const totalTime = exam.period * 60 * 1000;\n    return Math.min(100, (elapsedTime / totalTime) * 100);\n  }, [exam, elapsedTime]);\n\n  return {\n    timeLeft,\n    isRunning,\n    elapsedTime,\n    formatTime,\n    getProgressPercentage,\n    status: exam.status,\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}