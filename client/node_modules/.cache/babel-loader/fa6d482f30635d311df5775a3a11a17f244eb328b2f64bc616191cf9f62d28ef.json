{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:3000\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async credentials => {\n    try {\n      // Use fetch instead of axios to avoid CORS preflight issues\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Login response:\", data);\n\n      // Backend returns { data: { user, accessToken } }, extract and transform\n      const {\n        user,\n        accessToken\n      } = data.data;\n\n      // Store the token and user\n      localStorage.setItem(\"access_token\", accessToken);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      return {\n        access_token: accessToken,\n        // Convert accessToken → access_token\n        user: user\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"user\");\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const examService = {\n  getAllExams: async params => {\n    try {\n      var _data$data;\n      const token = localStorage.getItem(\"access_token\");\n      console.log(\"Getting exams with token:\", {\n        hasToken: !!token,\n        tokenLength: token === null || token === void 0 ? void 0 : token.length,\n        tokenStart: (token === null || token === void 0 ? void 0 : token.substring(0, 20)) + \"...\",\n        tokenEnd: token === null || token === void 0 ? void 0 : token.substring(token.length - 20)\n      });\n\n      // Only include search parameter if it's not empty\n      const queryParams = {};\n      if (params !== null && params !== void 0 && params.search && params.search.trim() !== \"\") {\n        queryParams.search = params.search.trim();\n      }\n      // If no search parameter, don't send it at all\n\n      if ((params === null || params === void 0 ? void 0 : params.skip) !== undefined) {\n        queryParams.skip = params.skip.toString();\n      }\n      if ((params === null || params === void 0 ? void 0 : params.take) !== undefined) {\n        queryParams.take = params.take.toString();\n      }\n      const queryString = new URLSearchParams(queryParams).toString();\n      const url = `${API_BASE_URL}/exams?${queryString}`;\n      console.log(\"Making request to:\", url);\n      console.log(\"With headers:\", {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      });\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response headers:\", Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json().catch(() => ({}));\n        console.error(\"Get exams error:\", errorData);\n        throw new Error(`HTTP error! status: ${response.status}, message: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Unknown error\"}`);\n      }\n      const data = await response.json();\n      console.log(\"Exams response:\", data);\n      console.log(\"Exams response type:\", typeof data);\n      console.log(\"Exams response keys:\", Object.keys(data));\n      console.log(\"Data.data type:\", typeof data.data);\n      console.log(\"Data.data:\", data.data);\n      console.log(\"Data.data length:\", (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.length);\n\n      // Backend returns nested structure: { data: { data: [...], totalRecords: X } }\n      // Extract and transform to match client's expected ApiResponse<Exam[]> format\n      const examsArray = data.data.data;\n\n      // Transform time units for each exam:\n      // - period: keep in minutes (for display)\n      // - totalPausedTime: milliseconds → seconds (for calculations)\n      const transformedExams = examsArray.map(exam => ({\n        ...exam,\n        period: exam.period,\n        // Keep in minutes for display\n        totalPausedTime: Math.floor(exam.totalPausedTime / 1000) // Convert milliseconds to seconds\n      }));\n      const transformedResponse = {\n        data: transformedExams,\n        totalRecords: data.data.totalRecords\n      };\n      console.log(\"Transformed response:\", transformedResponse);\n      console.log(\"Exams array length:\", transformedResponse.data.length);\n      return transformedResponse;\n    } catch (error) {\n      console.error(\"Get exams error:\", error);\n      console.error(\"Error details:\", {\n        message: (error === null || error === void 0 ? void 0 : error.message) || \"Unknown error\",\n        stack: (error === null || error === void 0 ? void 0 : error.stack) || \"No stack trace\",\n        name: (error === null || error === void 0 ? void 0 : error.name) || \"Unknown error type\"\n      });\n      throw error;\n    }\n  },\n  getExamById: async id => {\n    try {\n      const token = localStorage.getItem(\"access_token\");\n      const response = await fetch(`${API_BASE_URL}/exams/${id}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Get exam by ID response:\", data);\n\n      // Backend returns nested structure: { data: { ...examData } }\n      // Extract the actual exam data and transform time units\n      const examData = data.data;\n\n      // Transform time units:\n      // - period: keep in minutes (for display)\n      // - totalPausedTime: milliseconds → seconds (for calculations)\n      const transformedExam = {\n        ...examData,\n        period: examData.period,\n        // Keep in minutes for display\n        totalPausedTime: Math.floor(examData.totalPausedTime / 1000) // Convert milliseconds to seconds\n      };\n      console.log(\"Transformed exam data:\", transformedExam);\n      console.log(\"Period (minutes):\", transformedExam.period);\n      console.log(\"Total paused time (seconds):\", transformedExam.totalPausedTime);\n      return transformedExam;\n    } catch (error) {\n      console.error(\"Get exam by ID error:\", error);\n      console.error(\"Error details:\", {\n        message: (error === null || error === void 0 ? void 0 : error.message) || \"Unknown error\",\n        stack: (error === null || error === void 0 ? void 0 : error.stack) || \"No stack trace\",\n        name: (error === null || error === void 0 ? void 0 : error.name) || \"Unknown error type\"\n      });\n      throw error;\n    }\n  },\n  pauseExam: async id => {\n    try {\n      const token = localStorage.getItem(\"access_token\");\n      const response = await fetch(`${API_BASE_URL}/exams/${id}/pause`, {\n        method: \"PATCH\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Pause exam response:\", data);\n\n      // Handle nested response and transform time units\n      const examData = data.data || data;\n      const transformedExam = {\n        ...examData,\n        period: examData.period,\n        // Keep in minutes for display\n        totalPausedTime: Math.floor(examData.totalPausedTime / 1000) // Convert milliseconds to seconds\n      };\n      return transformedExam;\n    } catch (error) {\n      console.error(\"Pause exam error:\", error);\n      throw error;\n    }\n  },\n  unpauseExam: async id => {\n    try {\n      const token = localStorage.getItem(\"access_token\");\n      const response = await fetch(`${API_BASE_URL}/exams/${id}/unpause`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Unpause exam response:\", data);\n\n      // Handle nested response and transform time units\n      const examData = data.data || data;\n      const transformedExam = {\n        ...examData,\n        period: examData.period,\n        // Keep in minutes for display\n        totalPausedTime: Math.floor(examData.totalPausedTime / 1000) // Convert milliseconds to seconds\n      };\n      return transformedExam;\n    } catch (error) {\n      console.error(\"Unpause exam error:\", error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","fetch","method","body","JSON","stringify","ok","Error","data","json","console","log","user","accessToken","setItem","access_token","logout","getCurrentUser","userStr","parse","examService","getAllExams","params","_data$data","hasToken","tokenLength","length","tokenStart","substring","tokenEnd","queryParams","search","trim","skip","undefined","toString","take","queryString","URLSearchParams","url","Object","fromEntries","entries","_errorData$error","errorData","catch","message","keys","examsArray","transformedExams","map","exam","period","totalPausedTime","Math","floor","transformedResponse","totalRecords","stack","name","getExamById","id","examData","transformedExam","pauseExam","unpauseExam"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\nimport { LoginCredentials, LoginResponse, Exam, ApiResponse } from \"../types\";\n\nconst API_BASE_URL = \"http://localhost:3000\";\n\n// Create axios instance\nconst api = axios.create({\n\tbaseURL: API_BASE_URL,\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t},\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use((config) => {\n\tconst token = localStorage.getItem(\"access_token\");\n\tif (token) {\n\t\tconfig.headers.Authorization = `Bearer ${token}`;\n\t}\n\treturn config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n\t(response) => response,\n\t(error) => {\n\t\tif (error.response?.status === 401) {\n\t\t\tlocalStorage.removeItem(\"access_token\");\n\t\t\tlocalStorage.removeItem(\"user\");\n\t\t\twindow.location.href = \"/login\";\n\t\t}\n\t\treturn Promise.reject(error);\n\t}\n);\n\nexport const authService = {\n\tlogin: async (credentials: LoginCredentials): Promise<LoginResponse> => {\n\t\ttry {\n\t\t\t// Use fetch instead of axios to avoid CORS preflight issues\n\t\t\tconst response = await fetch(`${API_BASE_URL}/auth/login`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(credentials),\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log(\"Login response:\", data);\n\n\t\t\t// Backend returns { data: { user, accessToken } }, extract and transform\n\t\t\tconst { user, accessToken } = data.data;\n\n\t\t\t// Store the token and user\n\t\t\tlocalStorage.setItem(\"access_token\", accessToken);\n\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(user));\n\n\t\t\treturn {\n\t\t\t\taccess_token: accessToken, // Convert accessToken → access_token\n\t\t\t\tuser: user,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Login error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tlogout: () => {\n\t\tlocalStorage.removeItem(\"access_token\");\n\t\tlocalStorage.removeItem(\"user\");\n\t},\n\n\tgetCurrentUser: () => {\n\t\tconst userStr = localStorage.getItem(\"user\");\n\t\treturn userStr ? JSON.parse(userStr) : null;\n\t},\n};\n\nexport const examService = {\n\tgetAllExams: async (params?: { search?: string; skip?: number; take?: number }): Promise<ApiResponse<Exam[]>> => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem(\"access_token\");\n\t\t\tconsole.log(\"Getting exams with token:\", {\n\t\t\t\thasToken: !!token,\n\t\t\t\ttokenLength: token?.length,\n\t\t\t\ttokenStart: token?.substring(0, 20) + \"...\",\n\t\t\t\ttokenEnd: token?.substring(token.length - 20),\n\t\t\t});\n\n\t\t\t// Only include search parameter if it's not empty\n\t\t\tconst queryParams: Record<string, string> = {};\n\n\t\t\tif (params?.search && params.search.trim() !== \"\") {\n\t\t\t\tqueryParams.search = params.search.trim();\n\t\t\t}\n\t\t\t// If no search parameter, don't send it at all\n\n\t\t\tif (params?.skip !== undefined) {\n\t\t\t\tqueryParams.skip = params.skip.toString();\n\t\t\t}\n\n\t\t\tif (params?.take !== undefined) {\n\t\t\t\tqueryParams.take = params.take.toString();\n\t\t\t}\n\n\t\t\tconst queryString = new URLSearchParams(queryParams).toString();\n\t\t\tconst url = `${API_BASE_URL}/exams?${queryString}`;\n\n\t\t\tconsole.log(\"Making request to:\", url);\n\t\t\tconsole.log(\"With headers:\", {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t});\n\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconsole.log(\"Response status:\", response.status);\n\t\t\tconsole.log(\"Response headers:\", Object.fromEntries(response.headers.entries()));\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.json().catch(() => ({}));\n\t\t\t\tconsole.error(\"Get exams error:\", errorData);\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}, message: ${errorData.error?.message || \"Unknown error\"}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log(\"Exams response:\", data);\n\t\t\tconsole.log(\"Exams response type:\", typeof data);\n\t\t\tconsole.log(\"Exams response keys:\", Object.keys(data));\n\t\t\tconsole.log(\"Data.data type:\", typeof data.data);\n\t\t\tconsole.log(\"Data.data:\", data.data);\n\t\t\tconsole.log(\"Data.data length:\", data.data?.length);\n\n\t\t\t// Backend returns nested structure: { data: { data: [...], totalRecords: X } }\n\t\t\t// Extract and transform to match client's expected ApiResponse<Exam[]> format\n\t\t\tconst examsArray = data.data.data;\n\n\t\t\t// Transform time units for each exam:\n\t\t\t// - period: keep in minutes (for display)\n\t\t\t// - totalPausedTime: milliseconds → seconds (for calculations)\n\t\t\tconst transformedExams = examsArray.map((exam: any) => ({\n\t\t\t\t...exam,\n\t\t\t\tperiod: exam.period, // Keep in minutes for display\n\t\t\t\ttotalPausedTime: Math.floor(exam.totalPausedTime / 1000), // Convert milliseconds to seconds\n\t\t\t}));\n\n\t\t\tconst transformedResponse: ApiResponse<Exam[]> = {\n\t\t\t\tdata: transformedExams,\n\t\t\t\ttotalRecords: data.data.totalRecords,\n\t\t\t};\n\n\t\t\tconsole.log(\"Transformed response:\", transformedResponse);\n\t\t\tconsole.log(\"Exams array length:\", transformedResponse.data.length);\n\n\t\t\treturn transformedResponse;\n\t\t} catch (error: any) {\n\t\t\tconsole.error(\"Get exams error:\", error);\n\t\t\tconsole.error(\"Error details:\", {\n\t\t\t\tmessage: error?.message || \"Unknown error\",\n\t\t\t\tstack: error?.stack || \"No stack trace\",\n\t\t\t\tname: error?.name || \"Unknown error type\",\n\t\t\t});\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tgetExamById: async (id: number): Promise<Exam> => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem(\"access_token\");\n\n\t\t\tconst response = await fetch(`${API_BASE_URL}/exams/${id}`, {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log(\"Get exam by ID response:\", data);\n\n\t\t\t// Backend returns nested structure: { data: { ...examData } }\n\t\t\t// Extract the actual exam data and transform time units\n\t\t\tconst examData = data.data;\n\n\t\t\t// Transform time units:\n\t\t\t// - period: keep in minutes (for display)\n\t\t\t// - totalPausedTime: milliseconds → seconds (for calculations)\n\t\t\tconst transformedExam: Exam = {\n\t\t\t\t...examData,\n\t\t\t\tperiod: examData.period, // Keep in minutes for display\n\t\t\t\ttotalPausedTime: Math.floor(examData.totalPausedTime / 1000), // Convert milliseconds to seconds\n\t\t\t};\n\n\t\t\tconsole.log(\"Transformed exam data:\", transformedExam);\n\t\t\tconsole.log(\"Period (minutes):\", transformedExam.period);\n\t\t\tconsole.log(\"Total paused time (seconds):\", transformedExam.totalPausedTime);\n\n\t\t\treturn transformedExam;\n\t\t} catch (error: any) {\n\t\t\tconsole.error(\"Get exam by ID error:\", error);\n\t\t\tconsole.error(\"Error details:\", {\n\t\t\t\tmessage: error?.message || \"Unknown error\",\n\t\t\t\tstack: error?.stack || \"No stack trace\",\n\t\t\t\tname: error?.name || \"Unknown error type\",\n\t\t\t});\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tpauseExam: async (id: number): Promise<Exam> => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem(\"access_token\");\n\n\t\t\tconst response = await fetch(`${API_BASE_URL}/exams/${id}/pause`, {\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log(\"Pause exam response:\", data);\n\n\t\t\t// Handle nested response and transform time units\n\t\t\tconst examData = data.data || data;\n\t\t\tconst transformedExam: Exam = {\n\t\t\t\t...examData,\n\t\t\t\tperiod: examData.period, // Keep in minutes for display\n\t\t\t\ttotalPausedTime: Math.floor(examData.totalPausedTime / 1000), // Convert milliseconds to seconds\n\t\t\t};\n\n\t\t\treturn transformedExam;\n\t\t} catch (error: any) {\n\t\t\tconsole.error(\"Pause exam error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tunpauseExam: async (id: number): Promise<Exam> => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem(\"access_token\");\n\n\t\t\tconst response = await fetch(`${API_BASE_URL}/exams/${id}/unpause`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log(\"Unpause exam response:\", data);\n\n\t\t\t// Handle nested response and transform time units\n\t\t\tconst examData = data.data || data;\n\t\t\tconst transformedExam: Exam = {\n\t\t\t\t...examData,\n\t\t\t\tperiod: examData.period, // Keep in minutes for display\n\t\t\t\ttotalPausedTime: Math.floor(examData.totalPausedTime / 1000), // Convert milliseconds to seconds\n\t\t\t};\n\n\t\t\treturn transformedExam;\n\t\t} catch (error: any) {\n\t\t\tconsole.error(\"Unpause exam error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}