{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.examUpdateCallbacks = new Map();\n    this.globalExamUpdateCallbacks = [];\n  }\n  connect() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    // Listen for all exam update events\n    this.socket.onAny((eventName, exam) => {\n      console.log('Received event:', eventName, exam);\n\n      // Check if it's an ExamUpdated event\n      if (eventName.startsWith('ExamUpdated-')) {\n        const examId = parseInt(eventName.split('-')[1]);\n        console.log('Exam updated via WebSocket:', {\n          examId,\n          exam\n        });\n\n        // Notify specific exam listeners\n        const callbacks = this.examUpdateCallbacks.get(examId);\n        if (callbacks) {\n          callbacks.forEach(callback => callback(exam));\n        }\n\n        // Notify global listeners\n        this.globalExamUpdateCallbacks.forEach(callback => callback(exam));\n      }\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  // Listen for updates to a specific exam\n  onExamUpdate(examId, callback) {\n    if (!this.examUpdateCallbacks.has(examId)) {\n      this.examUpdateCallbacks.set(examId, []);\n    }\n    this.examUpdateCallbacks.get(examId).push(callback);\n  }\n\n  // Remove listener for a specific exam\n  offExamUpdate(examId, callback) {\n    const callbacks = this.examUpdateCallbacks.get(examId);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  // Listen for all exam updates\n  onGlobalExamUpdate(callback) {\n    this.globalExamUpdateCallbacks.push(callback);\n  }\n\n  // Remove global listener\n  offGlobalExamUpdate(callback) {\n    const index = this.globalExamUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.globalExamUpdateCallbacks.splice(index, 1);\n    }\n  }\n  joinExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit('joinExam', {\n        examId\n      });\n      console.log('Joined exam room:', examId);\n    }\n  }\n  leaveExamRoom(examId) {\n    if (this.socket) {\n      this.socket.emit('leaveExam', {\n        examId\n      });\n      console.log('Left exam room:', examId);\n    }\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","examUpdateCallbacks","Map","globalExamUpdateCallbacks","connect","on","console","log","onAny","eventName","exam","startsWith","examId","parseInt","split","callbacks","get","forEach","callback","disconnect","onExamUpdate","has","set","push","offExamUpdate","index","indexOf","splice","onGlobalExamUpdate","offGlobalExamUpdate","joinExamRoom","emit","leaveExamRoom","socketService"],"sources":["/Users/faek-ayoubi/Desktop/Projects/prep_doctor/client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { Exam } from '../types';\n\nclass SocketService {\n  private socket: Socket | null = null;\n  private examUpdateCallbacks: Map<number, ((exam: Exam) => void)[]> = new Map();\n  private globalExamUpdateCallbacks: ((exam: Exam) => void)[] = [];\n\n  connect() {\n    this.socket = io('http://localhost:3000');\n\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    // Listen for all exam update events\n    this.socket.onAny((eventName: string, exam: Exam) => {\n      console.log('Received event:', eventName, exam);\n      \n      // Check if it's an ExamUpdated event\n      if (eventName.startsWith('ExamUpdated-')) {\n        const examId = parseInt(eventName.split('-')[1]);\n        console.log('Exam updated via WebSocket:', { examId, exam });\n        \n        // Notify specific exam listeners\n        const callbacks = this.examUpdateCallbacks.get(examId);\n        if (callbacks) {\n          callbacks.forEach(callback => callback(exam));\n        }\n        \n        // Notify global listeners\n        this.globalExamUpdateCallbacks.forEach(callback => callback(exam));\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  // Listen for updates to a specific exam\n  onExamUpdate(examId: number, callback: (exam: Exam) => void) {\n    if (!this.examUpdateCallbacks.has(examId)) {\n      this.examUpdateCallbacks.set(examId, []);\n    }\n    this.examUpdateCallbacks.get(examId)!.push(callback);\n  }\n\n  // Remove listener for a specific exam\n  offExamUpdate(examId: number, callback: (exam: Exam) => void) {\n    const callbacks = this.examUpdateCallbacks.get(examId);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  // Listen for all exam updates\n  onGlobalExamUpdate(callback: (exam: Exam) => void) {\n    this.globalExamUpdateCallbacks.push(callback);\n  }\n\n  // Remove global listener\n  offGlobalExamUpdate(callback: (exam: Exam) => void) {\n    const index = this.globalExamUpdateCallbacks.indexOf(callback);\n    if (index > -1) {\n      this.globalExamUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  joinExamRoom(examId: number) {\n    if (this.socket) {\n      this.socket.emit('joinExam', { examId });\n      console.log('Joined exam room:', examId);\n    }\n  }\n\n  leaveExamRoom(examId: number) {\n    if (this.socket) {\n      this.socket.emit('leaveExam', { examId });\n      console.log('Left exam room:', examId);\n    }\n  }\n}\n\nexport const socketService = new SocketService();\nexport default socketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}